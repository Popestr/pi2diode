# Ryan Pope (Popestr)
# Copyright 2019

# color.py: Main running script for sending color signals to the GPIO pins.
# Includes all current functionality outside of autocolor.py and makelist.py.

import json, random, pigpio
global pi, channels
pi = pigpio.pi(); # link script to GPIO


# a dictionary to track sets of channels. Currently untested past 1 physical channel.
channels = {}

channels[1] = [17,27,23] # channel 1
channels[2] = [13,19,26] # channel 2 (untested)

json_list = open("colors.list", "r") # read in color list from JSON file (must be generated by makelist.py first)
currsv = open("current.data", "w") 
colors = json.loads(json_list.read())

json_list.close()


# makeColor: send color signal to GPIO pins.
# red: red value (0-255)
# green: green value (0-255)
# blue: blue value (0-255)
# a: alpha (opacity) percent, (0.0-1.0)
def makeColor(red, green, blue, a):

	# multiply colors by alpha percentage for adjusted RGB values
    r = int(red*a)
    g = int(green*a)
    b = int(blue*a)

    # print r
    # print g
    # print b

    # send signals to all channels
    for key in channels.keys():
        pi.set_PWM_dutycycle(channels[key][0],r)
        pi.set_PWM_dutycycle(channels[key][1],g)
        pi.set_PWM_dutycycle(channels[key][2],b)

    saveColor([r,g,b])

# translate: takes color name (string) and sends the corresponding signal to the GPIO pins
# color: the color name (string)
def translate(color):
    vals = colors[color]
    makeColor(vals[0], vals[1], vals[2], 1)
    return vals


# saveColor: If user desires color to be active on next startup, color is saved to small JSON file
# c: current R/G/B values (3-element array)
def saveColor(c):
    currsv.write(json.dumps(c))
    currsv.close()
    save = raw_input("Colors set! Would you like to run these colors on startup? (Y/N) ")
    if save.lower() == "y":
        colorsaver = open("saved.data", "w")
        colorsaver.write(json.dumps(c))
        colorsaver.close()
        print "Saved."
    else: print "Not saved. Colors will revert on reboot."



# Set colors based on user input.
req = ""
isSet = False
while not isSet:
    req = raw_input("What color would you like to assign (enter color name)? Otherwise, enter \'rgb\' if you wish to enter RGB values, \'r\' for random or 0 to exit.\n")
    if req == '0': break
    elif req.lower() == 'r': # generate random colors from 0-255 (with full alpha)
        rr = random.randint(0,255)
        gr = random.randint(0,255)
        br = random.randint(0,255)
        makeColor(rr,gr,br,1)
        isSet = True
    elif req.lower() == 'rgb': # take in R/G/B values from user
        rIn = raw_input("What value for R?\n")
        gIn = raw_input("What value for G?\n")
        bIn = raw_input("What value for B?\n")
        makeColor(rIn,gIn,bIn,1)
        isSet = True
    else: # take user-inputted color name
        if req not in colors:
            print "Invalid input. Try again!"
        else:
            c = translate(req)
            isSet = True
